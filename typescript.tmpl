const datePrefix = "{{.DatePrefix}}";

class RPCError extends Error {
	readonly service: string;
	readonly method: string;

	constructor(message: string, service: string, method: string) {
		super(message);

		this.name = "RPCError";
		this.service = service;
		this.method = method;
	}
}

function reviver(key: string, value: any): Date | any {
	if (typeof value !== "string" || !value.startsWith(datePrefix)) {
		return value;
	}

	const str = value.slice(datePrefix.length + 1, -1);
	const timestamp = Date.parse(str);

	if (isNaN(timestamp)) {
		return value;
	}

	return new Date(timestamp);
}

async function call(url: string, service: string, method: string, input: any, headers?: HeadersInit, clientVersion?: string, onVersionMismatch?: (clientVersion: string, serverVersion: string) => void): Promise<unknown> {
	const res = await fetch(url + "?service=" + service + "&method=" + method, {
		method: "POST",
		headers: headers,
		body: JSON.stringify(input)
	});

	const serverVersion = res.headers.get("X-Server-Version");
	const isMismatched = serverVersion && clientVersion && clientVersion !== serverVersion;

	if (typeof onVersionMismatch == "function" && isMismatched) {
		onVersionMismatch(clientVersion, serverVersion);
	}

	const text = await res.text();
	const data = JSON.parse(text, reviver);

	if (res.status !== 200) {
		if (typeof data.message === "string") {
			throw new RPCError(data.message, service, method);
		} else {
			throw new RPCError("unknown error", service, method);
		}
	}

	return data.output;
}

{{.SymbolsTypeScript}}

{{range .Metadata.Services}}
export class {{.Name}} {
	name: string;
	version: string;
	clientVersion: string;
	url: string;
	headers?: HeadersInit;
	onVersionMismatch?: (clientVersion: string, serverVersion: string) => void;

	constructor(url: string, headers?: HeadersInit) {
		this.name = "{{.Name}}";
		this.version = "{{.Version}}";
		this.clientVersion = "{{$.Metadata.Version}}";
		this.url = url;
		this.headers = headers;
	}

	{{range .Methods -}}
	async {{camelCase .Name}}{{if (isVoid .Input)}}(){{else}}(input: {{typeOf .Input}}){{end}}{{if not (isVoid .Output)}}: Promise<{{typeOf .Output}}>{{end}} {
		{{if (isVoid .Output) -}}
		await call(this.url, this.name, "{{.Name}}", {{if (isVoid .Input)}}null{{else}}input{{end}}, this.headers, this.clientVersion, this.onVersionMismatch);
		{{- else -}}
		return call(this.url, this.name, "{{.Name}}", {{if (isVoid .Input)}}null{{else}}input{{end}}, this.headers, this.clientVersion, this.onVersionMismatch) as Promise<{{typeOf .Output}}>;
		{{- end}}
	}
	{{end}}
}
{{end}}

export class {{.Metadata.Name}} {
	version: string;
	url: string;
	headers?: HeadersInit;
	onVersionMismatch?: (clientVersion: string, serverVersion: string) => void;

	{{range .Metadata.Services -}}
	{{camelCase .Name}}: {{.Name}};
	{{end -}}

	constructor(url: string, headers?: HeadersInit) {
		this.version = "{{.Metadata.Version}}";
		this.url = url;
		this.headers = headers;

		{{range .Metadata.Services -}}
		this.{{camelCase .Name}} = new {{.Name}}(url, headers);
		this.{{camelCase .Name}}.onVersionMismatch = (clientVersion, serverVersion) => {
			if (this.onVersionMismatch) {
				this.onVersionMismatch(clientVersion, serverVersion);
			}
		};
		{{end -}}
	}
}